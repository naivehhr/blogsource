{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1530724648000},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1530804891000},{"_id":"themes/indigo/_config.yml","hash":"6d560f53e52ab23073c43406d6d0f2a1c5088178","modified":1530804891000},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1530804891000},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1530804891000},{"_id":"themes/indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1530804891000},{"_id":"source/_posts/javascript-函数式编程.md","hash":"6db9a0713e7ea4469769b7ddaf01da98c45086f2","modified":1530806243000},{"_id":"source/_posts/javascript-指针.md","hash":"ed72c62ca24a40e3b25ecd4b59e7cf135ff3710f","modified":1530724524000},{"_id":"source/_posts/javascript-编译原理.md","hash":"5e9d87351550bbfa22b51394221f376109b21c5c","modified":1530724524000},{"_id":"source/_posts/javascript-闭包.md","hash":"d2a07db9124b08d4ddb5f119fb9b6b1431b223c6","modified":1530724524000},{"_id":"source/_posts/js-basic.md","hash":"4f763bbf5d597464d63eafa0b02862e19dbcf467","modified":1530724524000},{"_id":"source/_posts/js-es6.md","hash":"5d81c6e05e2594df60921f7d6a7ae350d0fec93c","modified":1530724524000},{"_id":"source/_posts/nodejs-异步与单线程.md","hash":"b768a35c4f210e2d5f0148e54f362055b9d4fd18","modified":1530724524000},{"_id":"source/_posts/react.md","hash":"1563105599246927f6224659a55098c38ba42cb2","modified":1530724524000},{"_id":"source/_posts/rn-f8app.md","hash":"deb81c58ebfa53b09b5c7ce7e3f3fd89041162b4","modified":1530724524000},{"_id":"source/_posts/rn-animation-usage.md","hash":"1a6bffb1576f85cede88253ae03a1f1e25b6034e","modified":1530724524000},{"_id":"source/_posts/rn-communication-fundamentals.md","hash":"dd4195fa1ca3f2c4c1b96c8b872fee15b5207f3e","modified":1530724524000},{"_id":"source/_posts/rn-gesture-usage.md","hash":"ce2c39c38dc2fcbe78436e4d88df50a8f7c1dfce","modified":1530724524000},{"_id":"source/_posts/rn-原生组件封装-android.md","hash":"47c9444888560843b842a1a3f5d6d4f9b3ed8a96","modified":1530724524000},{"_id":"source/_posts/rn-mixeddevelopment.md","hash":"3fc29fc4b7106693ec272993845323744c42deba","modified":1530724524000},{"_id":"source/_posts/rn-promotion.md","hash":"281fd2e92ba6c095dbbcf04c9b40de75f2ce7ac4","modified":1530724524000},{"_id":"source/_posts/rn-原生组件封装-ios.md","hash":"af32f573214e79d203ef94ff22ca934c60dd2604","modified":1530724524000},{"_id":"source/_posts/rn-键盘遮挡问题.md","hash":"fcc30df05cce85781676a09c4d239c284eb2f4cc","modified":1530724524000},{"_id":"source/categories/index.md","hash":"cf66d0080df11b8d38f4506e3f50b57c735a8624","modified":1530724524000},{"_id":"source/tags/index.md","hash":"5742bfda2f05ed6a6fca513ec4d6ba134476bfc5","modified":1530724524000},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1530804891000},{"_id":"themes/indigo/.git/config","hash":"1096da7405bf0751ed8d5e91f24910015fb6928f","modified":1530804891000},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1530804874000},{"_id":"themes/indigo/.git/index","hash":"e5351004471b69b86e6087ee7bb8a35822873c20","modified":1530804892000},{"_id":"themes/indigo/.git/packed-refs","hash":"8d23deb22f1c0a29dd88b28c901be181fe9862dc","modified":1530804891000},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1530804891000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1530804891000},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1530804891000},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1530804891000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1530804891000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1530804891000},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1530804891000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1530804891000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1530804891000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1530804891000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1530804891000},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1530804891000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1530804891000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1530804891000},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1530804891000},{"_id":"source/_posts/RN-原生组件封装-Android/catalogue.png","hash":"14628ec546ad98b33fca4d943d55f48f44d2c86a","modified":1530724524000},{"_id":"source/_posts/rn-mixeddevelopment/aaa7347988b2c71a.png","hash":"1d9bb5c330cc108dd1ab68037b4406daaa7f3e4d","modified":1530724524000},{"_id":"source/_posts/rn-mixeddevelopment/3fb2e1d5b4f654d5.png","hash":"2c6b2b373d891d12756a86794d54c1793d9a3506","modified":1530724524000},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1530804874000},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1530804874000},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1530804874000},{"_id":"themes/indigo/.git/logs/HEAD","hash":"508b519f7bf09279b07f12a2a91d1444d8b4b284","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1530804891000},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1530804891000},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1530804891000},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1530804891000},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1530804891000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1530804891000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1530804891000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1530804891000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1530804891000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1530804891000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1530804891000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1530804891000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1530804891000},{"_id":"source/_posts/RN-原生组件封装-IOS/setting_header_search_paths.png","hash":"b45e5233b31d3013dd4048e283529264a4fbcb6c","modified":1530724524000},{"_id":"themes/indigo/.git/refs/heads/card","hash":"484dfa35ff9eb7a589991d8ca81ef961cd2a4ea6","modified":1530804891000},{"_id":"themes/indigo/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.idx","hash":"bc27ce7e6985f304faf60d78bf4e2a0ae459d0f6","modified":1530804890000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1530804891000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1530804891000},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1530804891000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1530804891000},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"508b519f7bf09279b07f12a2a91d1444d8b4b284","modified":1530804891000},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1530804891000},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"508b519f7bf09279b07f12a2a91d1444d8b4b284","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1530804891000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1530804891000},{"_id":"themes/indigo/.git/objects/pack/pack-b8d04c6e09114566e2614fa8f4dea3c1f5bb24b8.pack","hash":"ff30c6fac44de0ec07b07ce9f38d9af0a3d3855d","modified":1530804890000}],"Category":[{"name":"前端开发","_id":"cjjbh6oeq0009ffjynblg3k55"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\n---\n","date":"2018-07-04T17:15:24.000Z","updated":"2018-07-04T17:15:24.000Z","path":"categories/index.html","title":"","_id":"cjjbh6oe20001ffjyzzwa0ijb","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\n---\n","date":"2018-07-04T17:15:24.000Z","updated":"2018-07-04T17:15:24.000Z","path":"tags/index.html","title":"","_id":"cjjbh6oe80003ffjyididotv0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"javascript-指针","date":"2017-03-23T14:45:51.000Z","_content":"\n# javascript-指针\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/javascript-指针.md","raw":"---\ntitle: javascript-指针\ndate: 2017-03-23 22:45:51\ntags: javascript\n---\n\n# javascript-指针\n***\n>  \n> 描述\n\n<!--more-->","slug":"javascript-指针","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6odw0000ffjyf0e0tnkp","content":"<h1 id=\"javascript-指针\"><a href=\"#javascript-指针\" class=\"headerlink\" title=\"javascript-指针\"></a>javascript-指针</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"javascript-指针\"><a href=\"#javascript-指针\" class=\"headerlink\" title=\"javascript-指针\"></a>javascript-指针</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"javascript-函数式编程","date":"2017-03-28T15:00:19.000Z","_content":"\n# javascript-函数式编程\n***\n>  \n> 描述\n\n函数式编程函数式编程函数式编程函数式编程\n<!--more-->","source":"_posts/javascript-函数式编程.md","raw":"---\ntitle: javascript-函数式编程\ndate: 2017-03-28 23:00:19\ntags:\n---\n\n# javascript-函数式编程\n***\n>  \n> 描述\n\n函数式编程函数式编程函数式编程函数式编程\n<!--more-->","slug":"javascript-函数式编程","published":1,"updated":"2018-07-05T15:57:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oe50002ffjyg75spfdv","content":"<h1 id=\"javascript-函数式编程\"><a href=\"#javascript-函数式编程\" class=\"headerlink\" title=\"javascript-函数式编程\"></a>javascript-函数式编程</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<p>函数式编程函数式编程函数式编程函数式编程<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"javascript-函数式编程\"><a href=\"#javascript-函数式编程\" class=\"headerlink\" title=\"javascript-函数式编程\"></a>javascript-函数式编程</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<p>函数式编程函数式编程函数式编程函数式编程<br></p>","more":"<p></p>"},{"title":"javascript-闭包","date":"2017-03-23T14:42:01.000Z","_content":"\n# JavaScript闭包\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/javascript-闭包.md","raw":"---\ntitle: javascript-闭包\ndate: 2017-03-23 22:42:01\ntags: javascript\n---\n\n# JavaScript闭包\n***\n>  \n> 描述\n\n<!--more-->","slug":"javascript-闭包","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oef0005ffjy7ih4h8po","content":"<h1 id=\"JavaScript闭包\"><a href=\"#JavaScript闭包\" class=\"headerlink\" title=\"JavaScript闭包\"></a>JavaScript闭包</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript闭包\"><a href=\"#JavaScript闭包\" class=\"headerlink\" title=\"JavaScript闭包\"></a>JavaScript闭包</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"js-basic","date":"2017-03-12T15:29:39.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/js-basic.md","raw":"---\ntitle: js-basic\ndate: 2017-03-12 23:29:39\ncategories: 前端开发\ntags: javascript\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"js-basic","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oek0006ffjynq5udson","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"js-es6","date":"2017-03-12T15:29:51.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/js-es6.md","raw":"---\ntitle: js-es6\ndate: 2017-03-12 23:29:51\ncategories: 前端开发\ntags: javascript\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"js-es6","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oen0007ffjyol53mdgw","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"javascript-编译原理","date":"2017-03-23T14:46:05.000Z","_content":"\n# javascript-编译原理\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/javascript-编译原理.md","raw":"---\ntitle: javascript-编译原理\ndate: 2017-03-23 22:46:05\ntags: javascript\n---\n\n# javascript-编译原理\n***\n>  \n> 描述\n\n<!--more-->","slug":"javascript-编译原理","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oer000bffjy7smvx206","content":"<h1 id=\"javascript-编译原理\"><a href=\"#javascript-编译原理\" class=\"headerlink\" title=\"javascript-编译原理\"></a>javascript-编译原理</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"javascript-编译原理\"><a href=\"#javascript-编译原理\" class=\"headerlink\" title=\"javascript-编译原理\"></a>javascript-编译原理</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"nodejs-异步与单线程","date":"2017-03-28T14:31:26.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\nhttp://www.cnblogs.com/dolphinX/p/3475090.html\n<!--more-->","source":"_posts/nodejs-异步与单线程.md","raw":"---\ntitle: nodejs-异步与单线程\ndate: 2017-03-28 22:31:26\ntags: node.js\n---\n\n# Title\n***\n>  \n> 描述\n\nhttp://www.cnblogs.com/dolphinX/p/3475090.html\n<!--more-->","slug":"nodejs-异步与单线程","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oes000dffjy8j9cjind","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<p><a href=\"http://www.cnblogs.com/dolphinX/p/3475090.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dolphinX/p/3475090.html</a><br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<p><a href=\"http://www.cnblogs.com/dolphinX/p/3475090.html\">http://www.cnblogs.com/dolphinX/p/3475090.html</a><br></p>","more":"<p></p>"},{"title":"react","date":"2017-03-23T14:50:16.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/react.md","raw":"---\ntitle: react\ndate: 2017-03-23 22:50:16\ntags: react\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"react","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oeu000fffjys288j858","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"RN-Animation","date":"2017-03-11T14:53:46.000Z","_content":"\n## ReactNative Animation\n\n### InteractionManager\n\n> 这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互\n\n***\n\n#### 几种动画交互优化的实现\n\n* InteractionManager //通常用于场景切换时的过场动画和异步数据加载\n* requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码\n* setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。\n* runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。\n<!--more-->\n> 第三种实测无太大影响，但尽量避免并行动画时使用setTimeout(由于其不确定性，有可能导致动画执行顺序更改)\n\n1、用法\n\n```\nInteractionManager.runAfterInteractions(() => {\n  // ...耗时较长的同步的任务...\n});\n\nvar handle = InteractionManager.createInteractionHandle();\n// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)\n// 在动画完成之后 执行动画的方法机会写在这个中间就行了\nInteractionManager.clearInteractionHandle(handle);\n// 在所有句柄都清除之后，现在开始依序执行队列中的任务\n```\n> runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。\n\n>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。\n\n\n* runAfterInteractions(callback: Function) 安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。\n* createInteractionHandle() 通知管理器有某个动画或者交互开始了。\n* clearInteractionHandle(handle: Handle) 通知管理器有某个动画或者交互已经结束了。\n* setDeadline(deadline: number) 如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。\n\n2、属性\n\n* Events\n* addListener\n\n```\n// jest中的示例用法，自己并未具体实现\nbeforeEach(() => {\n\tjest.resetModules();\n\tInteractionManager = require('InteractionManager');\n\t\t\n\tinteractionStart = jest.fn();\n\tinteractionComplete = jest.fn();\n\t\t\n\tInteractionManager.addListener(\n\t  InteractionManager.Events.interactionStart,\n\t  interactionStart\n\t);\n\tInteractionManager.addListener(\n\t  InteractionManager.Events.interactionComplete,\n\t  interactionComplete\n\t);\n});\n\n\n```\n\n\n### Animations\n\n1、 LayoutAnimation \n\n> LayoutAnimation 神器😁。 允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行\n\n```\n//android \nUIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n//在需要的地方设置当前页面动画\nLayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n```\n* easeInEaseOut //缓入缓出\n* linear //线性\n* spring //弹跳\n* easeIn //缓入\n* easeOut //缓出\n* keyboard //键入\n\n> 也可以自定义动画效果\n\n2、Animated.Value\n\n> 最基本的一个动画使用方式是创建一个Animated.Value,将该动画绑定到一个或者多个样式属性到动画组件中，然后通过开启动画运行\n\n```\nthis.state = {bounceValue: new Animated.Value(0),}\nAnimated.spring(\n  this.state.bounceValue,\n  {\n    toValue: 0.8,\n    friction: 1\n  }\n).start();\n```\n// 东西略多。。。\n\n[0](http://reactnative.cn/docs/0.41/animations.html)\n\n[1](http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/)\n\n[2](http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/)\n\n","source":"_posts/rn-animation-usage.md","raw":"---\ntitle: RN-Animation\ndate: 2017-03-11 22:53:46\ncategories: 前端开发\ntags: react-native\n---\n\n## ReactNative Animation\n\n### InteractionManager\n\n> 这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互\n\n***\n\n#### 几种动画交互优化的实现\n\n* InteractionManager //通常用于场景切换时的过场动画和异步数据加载\n* requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码\n* setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。\n* runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。\n<!--more-->\n> 第三种实测无太大影响，但尽量避免并行动画时使用setTimeout(由于其不确定性，有可能导致动画执行顺序更改)\n\n1、用法\n\n```\nInteractionManager.runAfterInteractions(() => {\n  // ...耗时较长的同步的任务...\n});\n\nvar handle = InteractionManager.createInteractionHandle();\n// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)\n// 在动画完成之后 执行动画的方法机会写在这个中间就行了\nInteractionManager.clearInteractionHandle(handle);\n// 在所有句柄都清除之后，现在开始依序执行队列中的任务\n```\n> runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。\n\n>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。\n\n\n* runAfterInteractions(callback: Function) 安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。\n* createInteractionHandle() 通知管理器有某个动画或者交互开始了。\n* clearInteractionHandle(handle: Handle) 通知管理器有某个动画或者交互已经结束了。\n* setDeadline(deadline: number) 如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。\n\n2、属性\n\n* Events\n* addListener\n\n```\n// jest中的示例用法，自己并未具体实现\nbeforeEach(() => {\n\tjest.resetModules();\n\tInteractionManager = require('InteractionManager');\n\t\t\n\tinteractionStart = jest.fn();\n\tinteractionComplete = jest.fn();\n\t\t\n\tInteractionManager.addListener(\n\t  InteractionManager.Events.interactionStart,\n\t  interactionStart\n\t);\n\tInteractionManager.addListener(\n\t  InteractionManager.Events.interactionComplete,\n\t  interactionComplete\n\t);\n});\n\n\n```\n\n\n### Animations\n\n1、 LayoutAnimation \n\n> LayoutAnimation 神器😁。 允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行\n\n```\n//android \nUIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n//在需要的地方设置当前页面动画\nLayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n```\n* easeInEaseOut //缓入缓出\n* linear //线性\n* spring //弹跳\n* easeIn //缓入\n* easeOut //缓出\n* keyboard //键入\n\n> 也可以自定义动画效果\n\n2、Animated.Value\n\n> 最基本的一个动画使用方式是创建一个Animated.Value,将该动画绑定到一个或者多个样式属性到动画组件中，然后通过开启动画运行\n\n```\nthis.state = {bounceValue: new Animated.Value(0),}\nAnimated.spring(\n  this.state.bounceValue,\n  {\n    toValue: 0.8,\n    friction: 1\n  }\n).start();\n```\n// 东西略多。。。\n\n[0](http://reactnative.cn/docs/0.41/animations.html)\n\n[1](http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/)\n\n[2](http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/)\n\n","slug":"rn-animation-usage","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6oew000jffjypiqodi0e","content":"<h2 id=\"ReactNative-Animation\"><a href=\"#ReactNative-Animation\" class=\"headerlink\" title=\"ReactNative Animation\"></a>ReactNative Animation</h2><h3 id=\"InteractionManager\"><a href=\"#InteractionManager\" class=\"headerlink\" title=\"InteractionManager\"></a>InteractionManager</h3><blockquote>\n<p>这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互</p>\n</blockquote>\n<hr>\n<h4 id=\"几种动画交互优化的实现\"><a href=\"#几种动画交互优化的实现\" class=\"headerlink\" title=\"几种动画交互优化的实现\"></a>几种动画交互优化的实现</h4><ul>\n<li>InteractionManager //通常用于场景切换时的过场动画和异步数据加载</li>\n<li>requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码</li>\n<li>setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。</li>\n<li>runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。<a id=\"more\"></a>\n<blockquote>\n<p>第三种实测无太大影响，但尽量避免并行动画时使用setTimeout(由于其不确定性，有可能导致动画执行顺序更改)</p>\n</blockquote>\n</li>\n</ul>\n<p>1、用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InteractionManager.runAfterInteractions(() =&gt; &#123;</span><br><span class=\"line\">  // ...耗时较长的同步的任务...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var handle = InteractionManager.createInteractionHandle();</span><br><span class=\"line\">// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)</span><br><span class=\"line\">// 在动画完成之后 执行动画的方法机会写在这个中间就行了</span><br><span class=\"line\">InteractionManager.clearInteractionHandle(handle);</span><br><span class=\"line\">// 在所有句柄都清除之后，现在开始依序执行队列中的任务</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。</p>\n</blockquote>\n<blockquote>\n<p>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。</p>\n</blockquote>\n<ul>\n<li>runAfterInteractions(callback: Function) 安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。</li>\n<li>createInteractionHandle() 通知管理器有某个动画或者交互开始了。</li>\n<li>clearInteractionHandle(handle: Handle) 通知管理器有某个动画或者交互已经结束了。</li>\n<li>setDeadline(deadline: number) 如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。</li>\n</ul>\n<p>2、属性</p>\n<ul>\n<li>Events</li>\n<li>addListener</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// jest中的示例用法，自己并未具体实现</span><br><span class=\"line\">beforeEach(() =&gt; &#123;</span><br><span class=\"line\">\tjest.resetModules();</span><br><span class=\"line\">\tInteractionManager = require(&apos;InteractionManager&apos;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tinteractionStart = jest.fn();</span><br><span class=\"line\">\tinteractionComplete = jest.fn();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tInteractionManager.addListener(</span><br><span class=\"line\">\t  InteractionManager.Events.interactionStart,</span><br><span class=\"line\">\t  interactionStart</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tInteractionManager.addListener(</span><br><span class=\"line\">\t  InteractionManager.Events.interactionComplete,</span><br><span class=\"line\">\t  interactionComplete</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h3><p>1、 LayoutAnimation </p>\n<blockquote>\n<p>LayoutAnimation 神器😁。 允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android </span><br><span class=\"line\">UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</span><br><span class=\"line\">//在需要的地方设置当前页面动画</span><br><span class=\"line\">LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>easeInEaseOut //缓入缓出</li>\n<li>linear //线性</li>\n<li>spring //弹跳</li>\n<li>easeIn //缓入</li>\n<li>easeOut //缓出</li>\n<li>keyboard //键入</li>\n</ul>\n<blockquote>\n<p>也可以自定义动画效果</p>\n</blockquote>\n<p>2、Animated.Value</p>\n<blockquote>\n<p>最基本的一个动画使用方式是创建一个Animated.Value,将该动画绑定到一个或者多个样式属性到动画组件中，然后通过开启动画运行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.state = &#123;bounceValue: new Animated.Value(0),&#125;</span><br><span class=\"line\">Animated.spring(</span><br><span class=\"line\">  this.state.bounceValue,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    toValue: 0.8,</span><br><span class=\"line\">    friction: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n<p>// 东西略多。。。</p>\n<p><a href=\"http://reactnative.cn/docs/0.41/animations.html\" target=\"_blank\" rel=\"external\">0</a></p>\n<p><a href=\"http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/\" target=\"_blank\" rel=\"external\">1</a></p>\n<p><a href=\"http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/\" target=\"_blank\" rel=\"external\">2</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"ReactNative-Animation\"><a href=\"#ReactNative-Animation\" class=\"headerlink\" title=\"ReactNative Animation\"></a>ReactNative Animation</h2><h3 id=\"InteractionManager\"><a href=\"#InteractionManager\" class=\"headerlink\" title=\"InteractionManager\"></a>InteractionManager</h3><blockquote>\n<p>这里提及InteractionManager是因为InteractionManager的使用可以帮助我们实现更好的动画交互</p>\n</blockquote>\n<hr>\n<h4 id=\"几种动画交互优化的实现\"><a href=\"#几种动画交互优化的实现\" class=\"headerlink\" title=\"几种动画交互优化的实现\"></a>几种动画交互优化的实现</h4><ul>\n<li>InteractionManager //通常用于场景切换时的过场动画和异步数据加载</li>\n<li>requestAnimationFrame(): 用来执行在一段时间内控制视图动画的代码</li>\n<li>setImmediate/setTimeout/setInterval(): 在稍后执行代码。注意这有可能会延迟当前正在进行的动画。</li>\n<li>runAfterInteractions(): 在稍后执行代码，不会延迟当前进行的动画。</li></ul>","more":"<blockquote>\n<p>第三种实测无太大影响，但尽量避免并行动画时使用setTimeout(由于其不确定性，有可能导致动画执行顺序更改)</p>\n</blockquote>\n\n\n<p>1、用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InteractionManager.runAfterInteractions(() =&gt; &#123;</span><br><span class=\"line\">  // ...耗时较长的同步的任务...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var handle = InteractionManager.createInteractionHandle();</span><br><span class=\"line\">// 执行动画... (`runAfterInteractions`中的任务现在开始排队等候)</span><br><span class=\"line\">// 在动画完成之后 执行动画的方法机会写在这个中间就行了</span><br><span class=\"line\">InteractionManager.clearInteractionHandle(handle);</span><br><span class=\"line\">// 在所有句柄都清除之后，现在开始依序执行队列中的任务</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>runAfterInteractions接受一个普通的回调函数，或是一个PromiseTask对象，该对象需要带有名为gen的方法，并返回一个Promise。如果提供的参数是一个PromiseTask， 那么即便它是异步的它也会阻塞任务队列，直到它（以及它所有的依赖任务，哪怕这些依赖任务也是异步的）执行完毕后，才会执行下一个任务。</p>\n</blockquote>\n<blockquote>\n<p>默认情况下，排队的任务会在一次setImmediate方法中依序批量执行。如果你调用了setDeadLine方法并设定了一个正整数值，则任务只会在设定的时间到达后开始执行。在此之前，任务会通过setTimeout来挂起并阻塞其他任务执行，这样可以给诸如触摸交互一类的事件留出时间，使应用可以更快地响应用户。</p>\n</blockquote>\n<ul>\n<li>runAfterInteractions(callback: Function) 安排一个函数在所有的交互和动画完成之后运行。返回一个可取消的promise。</li>\n<li>createInteractionHandle() 通知管理器有某个动画或者交互开始了。</li>\n<li>clearInteractionHandle(handle: Handle) 通知管理器有某个动画或者交互已经结束了。</li>\n<li>setDeadline(deadline: number) 如果设定了一个正整数值，则会使用setTimeout来挂起所有尚未执行的任务。在eventLoopRunningTime到达设定时间后，才开始使用一个setImmediate方法来批量执行所有任务。</li>\n</ul>\n<p>2、属性</p>\n<ul>\n<li>Events</li>\n<li>addListener</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// jest中的示例用法，自己并未具体实现</span><br><span class=\"line\">beforeEach(() =&gt; &#123;</span><br><span class=\"line\">\tjest.resetModules();</span><br><span class=\"line\">\tInteractionManager = require(&apos;InteractionManager&apos;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tinteractionStart = jest.fn();</span><br><span class=\"line\">\tinteractionComplete = jest.fn();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tInteractionManager.addListener(</span><br><span class=\"line\">\t  InteractionManager.Events.interactionStart,</span><br><span class=\"line\">\t  interactionStart</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tInteractionManager.addListener(</span><br><span class=\"line\">\t  InteractionManager.Events.interactionComplete,</span><br><span class=\"line\">\t  interactionComplete</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Animations\"><a href=\"#Animations\" class=\"headerlink\" title=\"Animations\"></a>Animations</h3><p>1、 LayoutAnimation </p>\n<blockquote>\n<p>LayoutAnimation 神器😁。 允许你在全局范围内创建和更新动画，这些动画会在下一次渲染或布局周期运行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android </span><br><span class=\"line\">UIManager.setLayoutAnimationEnabledExperimental &amp;&amp; UIManager.setLayoutAnimationEnabledExperimental(true);</span><br><span class=\"line\">//在需要的地方设置当前页面动画</span><br><span class=\"line\">LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>easeInEaseOut //缓入缓出</li>\n<li>linear //线性</li>\n<li>spring //弹跳</li>\n<li>easeIn //缓入</li>\n<li>easeOut //缓出</li>\n<li>keyboard //键入</li>\n</ul>\n<blockquote>\n<p>也可以自定义动画效果</p>\n</blockquote>\n<p>2、Animated.Value</p>\n<blockquote>\n<p>最基本的一个动画使用方式是创建一个Animated.Value,将该动画绑定到一个或者多个样式属性到动画组件中，然后通过开启动画运行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.state = &#123;bounceValue: new Animated.Value(0),&#125;</span><br><span class=\"line\">Animated.spring(</span><br><span class=\"line\">  this.state.bounceValue,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    toValue: 0.8,</span><br><span class=\"line\">    friction: 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">).start();</span><br></pre></td></tr></table></figure>\n<p>// 东西略多。。。</p>\n<p><a href=\"http://reactnative.cn/docs/0.41/animations.html\">0</a></p>\n<p><a href=\"http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/\">1</a></p>\n<p><a href=\"http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/\">2</a></p>"},{"title":"rn-communication-fundamentals","date":"2017-03-11T15:04:05.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/rn-communication-fundamentals.md","raw":"---\ntitle: rn-communication-fundamentals\ncategories: 前端开发\ntags: react-native\ndate: 2017-03-11 23:04:05\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"rn-communication-fundamentals","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6of0000mffjyw28k3tmg","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"RN-原生组件封装-Android","date":"2017-03-20T13:47:29.000Z","_content":"\n# 原生模块封装-ANDROID\n***\n### [Demo](https://github.com/naivehhr/aran_native_log)\n\n### ref:\n\n[1](http://www.jianshu.com/p/73ef53244a7b) [2](http://www.jianshu.com/p/07b928feee3b) [3](http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/)\n\n### ps: 还是得自己过坑😁\n\n- 1、用Android Studio打开创建RN项目中的Android项目(比如成为A)\n\n- 2、在A的根目录中新建一个Module(右键或者File -> New -> New Module)，这里称为BModule\n\n- 3、在B中添加自己要封装的模块比如Toast的实现\n\n- 4、B中的依赖要和母RN项目一致或不要过高(有警告)\n\n- 5、引用的话就直接react-native link\n<!--more-->\n\n> ### 注意：\n> 封装组件时候尽量保持如下目录(图1); 引用时候路径\n\n```\ninclude ':aran-native-log'\nproject(':aran-native-log').projectDir = new File(rootProject.projectDir, '../node_modules/aran-native-log/android')\n\n```\n![Alt text](RN-原生组件封装-Android/catalogue.png)\n\n图一\n\n### TODO\n\n> 更多原生事件等\n\n","source":"_posts/rn-原生组件封装-android.md","raw":"---\ntitle: RN-原生组件封装-Android\ndate: 2017-03-20 21:47:29\ncategories: 前端开发\ntags: react-native\n---\n\n# 原生模块封装-ANDROID\n***\n### [Demo](https://github.com/naivehhr/aran_native_log)\n\n### ref:\n\n[1](http://www.jianshu.com/p/73ef53244a7b) [2](http://www.jianshu.com/p/07b928feee3b) [3](http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/)\n\n### ps: 还是得自己过坑😁\n\n- 1、用Android Studio打开创建RN项目中的Android项目(比如成为A)\n\n- 2、在A的根目录中新建一个Module(右键或者File -> New -> New Module)，这里称为BModule\n\n- 3、在B中添加自己要封装的模块比如Toast的实现\n\n- 4、B中的依赖要和母RN项目一致或不要过高(有警告)\n\n- 5、引用的话就直接react-native link\n<!--more-->\n\n> ### 注意：\n> 封装组件时候尽量保持如下目录(图1); 引用时候路径\n\n```\ninclude ':aran-native-log'\nproject(':aran-native-log').projectDir = new File(rootProject.projectDir, '../node_modules/aran-native-log/android')\n\n```\n![Alt text](RN-原生组件封装-Android/catalogue.png)\n\n图一\n\n### TODO\n\n> 更多原生事件等\n\n","slug":"rn-原生组件封装-android","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6of2000nffjy896ay8y0","content":"<h1 id=\"原生模块封装-ANDROID\"><a href=\"#原生模块封装-ANDROID\" class=\"headerlink\" title=\"原生模块封装-ANDROID\"></a>原生模块封装-ANDROID</h1><hr>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://github.com/naivehhr/aran_native_log\" target=\"_blank\" rel=\"external\">Demo</a></h3><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref:\"></a>ref:</h3><p><a href=\"http://www.jianshu.com/p/73ef53244a7b\" target=\"_blank\" rel=\"external\">1</a> <a href=\"http://www.jianshu.com/p/07b928feee3b\" target=\"_blank\" rel=\"external\">2</a> <a href=\"http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/\" target=\"_blank\" rel=\"external\">3</a></p>\n<h3 id=\"ps-还是得自己过坑😁\"><a href=\"#ps-还是得自己过坑😁\" class=\"headerlink\" title=\"ps: 还是得自己过坑😁\"></a>ps: 还是得自己过坑😁</h3><ul>\n<li><p>1、用Android Studio打开创建RN项目中的Android项目(比如成为A)</p>\n</li>\n<li><p>2、在A的根目录中新建一个Module(右键或者File -&gt; New -&gt; New Module)，这里称为BModule</p>\n</li>\n<li><p>3、在B中添加自己要封装的模块比如Toast的实现</p>\n</li>\n<li><p>4、B中的依赖要和母RN项目一致或不要过高(有警告)</p>\n</li>\n<li><p>5、引用的话就直接react-native link</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><p>封装组件时候尽量保持如下目录(图1); 引用时候路径</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &apos;:aran-native-log&apos;</span><br><span class=\"line\">project(&apos;:aran-native-log&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/aran-native-log/android&apos;)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/20/rn-原生组件封装-android/RN-原生组件封装-Android/catalogue.png\" alt=\"Alt text\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Alt text</div>\n            </figure>\n<p>图一</p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><blockquote>\n<p>更多原生事件等</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"原生模块封装-ANDROID\"><a href=\"#原生模块封装-ANDROID\" class=\"headerlink\" title=\"原生模块封装-ANDROID\"></a>原生模块封装-ANDROID</h1><hr>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://github.com/naivehhr/aran_native_log\">Demo</a></h3><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref:\"></a>ref:</h3><p><a href=\"http://www.jianshu.com/p/73ef53244a7b\">1</a> <a href=\"http://www.jianshu.com/p/07b928feee3b\">2</a> <a href=\"http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/\">3</a></p>\n<h3 id=\"ps-还是得自己过坑😁\"><a href=\"#ps-还是得自己过坑😁\" class=\"headerlink\" title=\"ps: 还是得自己过坑😁\"></a>ps: 还是得自己过坑😁</h3><ul>\n<li><p>1、用Android Studio打开创建RN项目中的Android项目(比如成为A)</p>\n</li>\n<li><p>2、在A的根目录中新建一个Module(右键或者File -&gt; New -&gt; New Module)，这里称为BModule</p>\n</li>\n<li><p>3、在B中添加自己要封装的模块比如Toast的实现</p>\n</li>\n<li><p>4、B中的依赖要和母RN项目一致或不要过高(有警告)</p>\n</li>\n<li><p>5、引用的话就直接react-native link</p></li></ul>","more":"\n\n<blockquote>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><p>封装组件时候尽量保持如下目录(图1); 引用时候路径</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &apos;:aran-native-log&apos;</span><br><span class=\"line\">project(&apos;:aran-native-log&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/aran-native-log/android&apos;)</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/20/rn-原生组件封装-android/RN-原生组件封装-Android/catalogue.png\" alt=\"Alt text\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Alt text</div>\n            </figure>\n<p>图一</p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><blockquote>\n<p>更多原生事件等</p>\n</blockquote>"},{"title":"RN-Gesture","date":"2017-03-11T15:01:44.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/rn-gesture-usage.md","raw":"---\ntitle: RN-Gesture\ndate: 2017-03-11 23:01:44\ntags:\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"rn-gesture-usage","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6of6000rffjyhdvudc3a","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""},{"title":"RN-混合开发","date":"2017-03-11T13:20:34.000Z","description":null,"_content":"\n# RN集成到原生项目\n***\n> 集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。\n\n\n\n## IOS\n \n### 原生混和开发：\n#### 一、开发配置\n\n> [参考](http://www.jianshu.com/p/3dc9d70a790f)\n\n##### 1. IOS项目中搭建RN开发环境(见参考)\n##### 2. 创建package.json\n<!--more-->\n```\n{\n  \"name\": \"MyRNApp\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\"\n  },\n  \"dependencies\": {\n    \"react\": \"15.2.1\",\n    \"react-native\": \"0.31.0\"\n  }\n}\n====> npm install \t\n```\n##### 3. 安装CocoaPods\n\n```objc\n# Uncomment this line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'MyRNApp' do\n  # Uncomment this line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for MyRNApp\n\n    pod 'React', :path => 'node_modules/react-native', :subspecs => [\n    'ART',\n    'RCTActionSheet',\n    'RCTAdSupport',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTPushNotification',\n    'RCTSettings',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n    'RCTLinkingIOS'\n    # Add any other subspecs you want to use in your project\n    ]\n\n  target 'MyRNAppTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'MyRNAppUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n\n注意path的路径设置,默认根目录,也可文件夹中\n====> pod install 喽~\n```\n\n#### 二、开始开发\n\n##### 1. 创建index.ios.js\n\n```\n'use strict';\nimport React, {Component} from 'react'\n\t\nimport {\n    Text,\n    View,\n    AppRegistry\n} from 'react-native';\n\t\nclass NativeRNApp extends React.Component {\n  render() {\n    return (\n      <View >\n        <Text>This is a simple application.</Text>\n      </View>\n    )\n  }\n}\nAppRegistry.registerComponent('NativeRNApp', () => NativeRNApp);\n```\n\n##### 2. 设置JS入口\n\n> 注: 可以直接就设置到默认的ViewController,也可以自己写个ReactViewController\n\n```objc\n@implementation ViewController\n\t\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self initRNView];\n   }\n\t\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\t\n-(void)initRNView {\n   NSString * strUrl = @\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\";\n    NSURL * jsCodeLocation = [NSURL URLWithString:strUrl];\n\t\n    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                         moduleName:@\"NativeRNApp\"\n                                                  initialProperties:nil\n                                                      launchOptions:nil];\n    self.view = rootView;\n}\n\t\n===> moduleName:@\"NativeRNApp\" 注意这个名称要和index.ios.js 中的对应上\n```\n\n##### 3. 一些问题记录\n> [参考](http://blog.csdn.net/u014410695/article/details/50635842)\n\n报错: App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure 报错原因是需要开启内网http的访问权限（iOS9之后会有这个问题）。\n> 在Info.plist中添加 NSAppTransportSecurity 类型 Dictionary ; \n在 NSAppTransportSecurity 下添加 NSAllowsArbitraryLoads 类型Boolean ,值设为 YES; \n参考地址：\n\n-\n\n报错：RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance key in the Info.plist is set to NO 错误信息说的很清楚了。\n> 在Info.plist中添加View controller-based status bar appearance为NO。\nhttp://www.cnblogs.com/chglog/p/4746683.html\n\n![Markdown](rn-mixeddevelopment/3fb2e1d5b4f654d5.png)\n\n应该还要在项目中设置node_modules的查找路径的...忘了在哪设置的了\n***\n### 集成已有RN模块(jsbundle)：\n\n> RN的项目直接作为模块嵌入到已有项目中\n\n#### 一、开发配置\n\n> 同上\n\n#### 二、开始开发\n\n##### 2-1 RNApp 打包jsbundle及资源文件\n\n> [参考](http://tutudev.com/2016/05/11/code-push-tutorial/)\n\n###### 打包： \n- (仅JS)\n\n> react-native bundle --parameter ios --entry-file index.ios.js --bundle-output ./testCodePush/APP_task010001.js\n\n- (包含图片等资源)\n\n> react-native bundle --parameter ios --entry-file index.ios.js --bundle-output ./bundles/SwitchCheck010004.js --assets-dest ./bundles\n\n##### 2-2 嵌入原生项目\n- 把打包出来的jsbundle及assets复制到项目根目录\n- 更改入口文件\n\n```objc\n-(void)initRNView {\n    NSURL *jsCodeLocation;\n    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                        moduleName:@\"JucaiApp\"\n                                                 initialProperties:nil\n                                                     launchOptions:nil];\n    CGRect rect = [[UIScreen mainScreen] bounds];\n    rootView.frame = CGRectMake(0, 0, rect.size.width, rect.size.height);\n    [self.view addSubview:rootView];\n}\n===> 同样注意程序入口名称JucaiApp\n```\n\t\n> 注：如果遇到确实某个RN项目package.json中配置的第三方依赖模块缺失，则需要在手动加到现有原生项目中(podfile维护即可)，但正常情况下是不需要滴.\n\n差一个目录的截图\n\n## Android\n\n#### 原生混和开发：\n#### 一、开发配置\n\n- 创建package.json 文件并npm install\n\n```\ndependencies {\n\tcompile \"com.facebook.react:react-native:+\"\n\tcompile 'com.android.support:appcompat-v7:23.4.0'\n\tcompile fileTree(dir: \"libs\", include: [\"*.jar\"])\n\tcompile project(':@remobile/react-native-toast')\n}\n==> 要用的库这样加进去,也可以Open Model Setting 添加依赖\n```\n\n- MainApplication 实现 ReactApplication并重载相关方法\n\n```java\n//facebook/react/ReactNativeHost.java\nprotected String getJSMainModuleName() {\n\treturn \"index.android\";\n}\nprotected @Nullable String getBundleAssetName() {\n\treturn \"index.android.bundle\";\n}\n==> 0.28or0.29以后就默认情况下就会默认设定加载，具体可参考ReactNativeHost.java\n```\n- build.gradle 添加设置node_modules的路径\n\n```\nallprojects {\n    repositories {\n        mavenLocal()\n        jcenter()\n        maven {\n            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n            url \"$rootDir/../node_modules/react-native/android\"\n        }\n    }\n}\n\n```\n暂未做在混合开发中配置RN DEBUG 方式，可以查看ReactNativeHost.java 配置即可\n\n#### 二、开始开发\n\n##### 2-1 创建index.android.js\n> 如果入口文件配置OK则就可看到RN开发页面了.\n\n> 同样，用RN开发的模块应该放在单独的目录中.\n\n---\n#### 集成已有RN模块(jsbundle)：\n#### 一、开发配置\n\n> 同样和IOS配置一样，这里需要android项目搭建好基本的RN开发环境\n\n\n#### 二、开始开发\n\n##### 2-1 打包jsbundle及资源文件\n\n打包命令：\n```\nreact-native bundle android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle.js --assets-dest ./bundles --dev false\n\n```\n> 同样，打包完毕后会有一些图片的资源文件夹，直接复制到res目录中\n\n![Markdown](rn-mixeddevelopment/aaa7347988b2c71a.png)\n\n##### 2-2 配置加载的jsbundle\n\n```\n@Override\nprotected String getBundleAssetName(){\n    return \"main.jsbundle\";\n}\n\n```\n\n### 到此，原生中集成RN开发流程就完成啦！\n> 参考项目后面会做\n\n\n\n","source":"_posts/rn-mixeddevelopment.md","raw":"---\ntitle: RN-混合开发\ndate: 2017-03-11 21:20:34\ndescription: \ncategories: 前端开发\ntags: react-native\n---\n\n# RN集成到原生项目\n***\n> 集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。\n\n\n\n## IOS\n \n### 原生混和开发：\n#### 一、开发配置\n\n> [参考](http://www.jianshu.com/p/3dc9d70a790f)\n\n##### 1. IOS项目中搭建RN开发环境(见参考)\n##### 2. 创建package.json\n<!--more-->\n```\n{\n  \"name\": \"MyRNApp\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\"\n  },\n  \"dependencies\": {\n    \"react\": \"15.2.1\",\n    \"react-native\": \"0.31.0\"\n  }\n}\n====> npm install \t\n```\n##### 3. 安装CocoaPods\n\n```objc\n# Uncomment this line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'MyRNApp' do\n  # Uncomment this line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for MyRNApp\n\n    pod 'React', :path => 'node_modules/react-native', :subspecs => [\n    'ART',\n    'RCTActionSheet',\n    'RCTAdSupport',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTPushNotification',\n    'RCTSettings',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n    'RCTLinkingIOS'\n    # Add any other subspecs you want to use in your project\n    ]\n\n  target 'MyRNAppTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'MyRNAppUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n\n注意path的路径设置,默认根目录,也可文件夹中\n====> pod install 喽~\n```\n\n#### 二、开始开发\n\n##### 1. 创建index.ios.js\n\n```\n'use strict';\nimport React, {Component} from 'react'\n\t\nimport {\n    Text,\n    View,\n    AppRegistry\n} from 'react-native';\n\t\nclass NativeRNApp extends React.Component {\n  render() {\n    return (\n      <View >\n        <Text>This is a simple application.</Text>\n      </View>\n    )\n  }\n}\nAppRegistry.registerComponent('NativeRNApp', () => NativeRNApp);\n```\n\n##### 2. 设置JS入口\n\n> 注: 可以直接就设置到默认的ViewController,也可以自己写个ReactViewController\n\n```objc\n@implementation ViewController\n\t\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    [self initRNView];\n   }\n\t\n- (void)didReceiveMemoryWarning {\n    [super didReceiveMemoryWarning];\n}\n\t\n-(void)initRNView {\n   NSString * strUrl = @\"http://localhost:8081/index.ios.bundle?platform=ios&dev=true\";\n    NSURL * jsCodeLocation = [NSURL URLWithString:strUrl];\n\t\n    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                         moduleName:@\"NativeRNApp\"\n                                                  initialProperties:nil\n                                                      launchOptions:nil];\n    self.view = rootView;\n}\n\t\n===> moduleName:@\"NativeRNApp\" 注意这个名称要和index.ios.js 中的对应上\n```\n\n##### 3. 一些问题记录\n> [参考](http://blog.csdn.net/u014410695/article/details/50635842)\n\n报错: App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure 报错原因是需要开启内网http的访问权限（iOS9之后会有这个问题）。\n> 在Info.plist中添加 NSAppTransportSecurity 类型 Dictionary ; \n在 NSAppTransportSecurity 下添加 NSAllowsArbitraryLoads 类型Boolean ,值设为 YES; \n参考地址：\n\n-\n\n报错：RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance key in the Info.plist is set to NO 错误信息说的很清楚了。\n> 在Info.plist中添加View controller-based status bar appearance为NO。\nhttp://www.cnblogs.com/chglog/p/4746683.html\n\n![Markdown](rn-mixeddevelopment/3fb2e1d5b4f654d5.png)\n\n应该还要在项目中设置node_modules的查找路径的...忘了在哪设置的了\n***\n### 集成已有RN模块(jsbundle)：\n\n> RN的项目直接作为模块嵌入到已有项目中\n\n#### 一、开发配置\n\n> 同上\n\n#### 二、开始开发\n\n##### 2-1 RNApp 打包jsbundle及资源文件\n\n> [参考](http://tutudev.com/2016/05/11/code-push-tutorial/)\n\n###### 打包： \n- (仅JS)\n\n> react-native bundle --parameter ios --entry-file index.ios.js --bundle-output ./testCodePush/APP_task010001.js\n\n- (包含图片等资源)\n\n> react-native bundle --parameter ios --entry-file index.ios.js --bundle-output ./bundles/SwitchCheck010004.js --assets-dest ./bundles\n\n##### 2-2 嵌入原生项目\n- 把打包出来的jsbundle及assets复制到项目根目录\n- 更改入口文件\n\n```objc\n-(void)initRNView {\n    NSURL *jsCodeLocation;\n    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                        moduleName:@\"JucaiApp\"\n                                                 initialProperties:nil\n                                                     launchOptions:nil];\n    CGRect rect = [[UIScreen mainScreen] bounds];\n    rootView.frame = CGRectMake(0, 0, rect.size.width, rect.size.height);\n    [self.view addSubview:rootView];\n}\n===> 同样注意程序入口名称JucaiApp\n```\n\t\n> 注：如果遇到确实某个RN项目package.json中配置的第三方依赖模块缺失，则需要在手动加到现有原生项目中(podfile维护即可)，但正常情况下是不需要滴.\n\n差一个目录的截图\n\n## Android\n\n#### 原生混和开发：\n#### 一、开发配置\n\n- 创建package.json 文件并npm install\n\n```\ndependencies {\n\tcompile \"com.facebook.react:react-native:+\"\n\tcompile 'com.android.support:appcompat-v7:23.4.0'\n\tcompile fileTree(dir: \"libs\", include: [\"*.jar\"])\n\tcompile project(':@remobile/react-native-toast')\n}\n==> 要用的库这样加进去,也可以Open Model Setting 添加依赖\n```\n\n- MainApplication 实现 ReactApplication并重载相关方法\n\n```java\n//facebook/react/ReactNativeHost.java\nprotected String getJSMainModuleName() {\n\treturn \"index.android\";\n}\nprotected @Nullable String getBundleAssetName() {\n\treturn \"index.android.bundle\";\n}\n==> 0.28or0.29以后就默认情况下就会默认设定加载，具体可参考ReactNativeHost.java\n```\n- build.gradle 添加设置node_modules的路径\n\n```\nallprojects {\n    repositories {\n        mavenLocal()\n        jcenter()\n        maven {\n            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n            url \"$rootDir/../node_modules/react-native/android\"\n        }\n    }\n}\n\n```\n暂未做在混合开发中配置RN DEBUG 方式，可以查看ReactNativeHost.java 配置即可\n\n#### 二、开始开发\n\n##### 2-1 创建index.android.js\n> 如果入口文件配置OK则就可看到RN开发页面了.\n\n> 同样，用RN开发的模块应该放在单独的目录中.\n\n---\n#### 集成已有RN模块(jsbundle)：\n#### 一、开发配置\n\n> 同样和IOS配置一样，这里需要android项目搭建好基本的RN开发环境\n\n\n#### 二、开始开发\n\n##### 2-1 打包jsbundle及资源文件\n\n打包命令：\n```\nreact-native bundle android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle.js --assets-dest ./bundles --dev false\n\n```\n> 同样，打包完毕后会有一些图片的资源文件夹，直接复制到res目录中\n\n![Markdown](rn-mixeddevelopment/aaa7347988b2c71a.png)\n\n##### 2-2 配置加载的jsbundle\n\n```\n@Override\nprotected String getBundleAssetName(){\n    return \"main.jsbundle\";\n}\n\n```\n\n### 到此，原生中集成RN开发流程就完成啦！\n> 参考项目后面会做\n\n\n\n","slug":"rn-mixeddevelopment","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6of9000tffjy5jfpsshj","content":"<h1 id=\"RN集成到原生项目\"><a href=\"#RN集成到原生项目\" class=\"headerlink\" title=\"RN集成到原生项目\"></a>RN集成到原生项目</h1><hr>\n<blockquote>\n<p>集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。</p>\n</blockquote>\n<h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><h3 id=\"原生混和开发：\"><a href=\"#原生混和开发：\" class=\"headerlink\" title=\"原生混和开发：\"></a>原生混和开发：</h3><h4 id=\"一、开发配置\"><a href=\"#一、开发配置\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p><a href=\"http://www.jianshu.com/p/3dc9d70a790f\" target=\"_blank\" rel=\"external\">参考</a></p>\n</blockquote>\n<h5 id=\"1-IOS项目中搭建RN开发环境-见参考\"><a href=\"#1-IOS项目中搭建RN开发环境-见参考\" class=\"headerlink\" title=\"1. IOS项目中搭建RN开发环境(见参考)\"></a>1. IOS项目中搭建RN开发环境(见参考)</h5><h5 id=\"2-创建package-json\"><a href=\"#2-创建package-json\" class=\"headerlink\" title=\"2. 创建package.json\"></a>2. 创建package.json</h5><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;MyRNApp&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;react&quot;: &quot;15.2.1&quot;,</span><br><span class=\"line\">    &quot;react-native&quot;: &quot;0.31.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">====&gt; npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-安装CocoaPods\"><a href=\"#3-安装CocoaPods\" class=\"headerlink\" title=\"3. 安装CocoaPods\"></a>3. 安装CocoaPods</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Uncomment this line to define a global platform for your project</span></span><br><span class=\"line\"><span class=\"meta\"># platform :ios, '9.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target 'MyRNApp' do</span><br><span class=\"line\">  <span class=\"meta\"># Uncomment this line if you're using Swift or would like to use dynamic frameworks</span></span><br><span class=\"line\">  <span class=\"meta\"># use_frameworks!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\"># Pods for MyRNApp</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pod 'React', :path =&gt; 'node_modules/react-native', :subspecs =&gt; [</span><br><span class=\"line\">    'ART',</span><br><span class=\"line\">    'RCTActionSheet',</span><br><span class=\"line\">    'RCTAdSupport',</span><br><span class=\"line\">    'RCTGeolocation',</span><br><span class=\"line\">    'RCTImage',</span><br><span class=\"line\">    'RCTNetwork',</span><br><span class=\"line\">    'RCTPushNotification',</span><br><span class=\"line\">    'RCTSettings',</span><br><span class=\"line\">    'RCTText',</span><br><span class=\"line\">    'RCTVibration',</span><br><span class=\"line\">    'RCTWebSocket',</span><br><span class=\"line\">    'RCTLinkingIOS'</span><br><span class=\"line\">    <span class=\"meta\"># Add any other subspecs you want to use in your project</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">  target 'MyRNAppTests' do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    <span class=\"meta\"># Pods for testing</span></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  target 'MyRNAppUITests' do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    <span class=\"meta\"># Pods for testing</span></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">注意path的路径设置,默认根目录,也可文件夹中</span><br><span class=\"line\">====&gt; pod install 喽~</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、开始开发\"><a href=\"#二、开始开发\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"1-创建index-ios-js\"><a href=\"#1-创建index-ios-js\" class=\"headerlink\" title=\"1. 创建index.ios.js\"></a>1. 创建index.ios.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">\t</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">    Text,</span><br><span class=\"line\">    View,</span><br><span class=\"line\">    AppRegistry</span><br><span class=\"line\">&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">class NativeRNApp extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View &gt;</span><br><span class=\"line\">        &lt;Text&gt;This is a simple application.&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AppRegistry.registerComponent(&apos;NativeRNApp&apos;, () =&gt; NativeRNApp);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-设置JS入口\"><a href=\"#2-设置JS入口\" class=\"headerlink\" title=\"2. 设置JS入口\"></a>2. 设置JS入口</h5><blockquote>\n<p>注: 可以直接就设置到默认的ViewController,也可以自己写个ReactViewController</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> initRNView];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)initRNView &#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSString</span> * strUrl = <span class=\"string\">@\"http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> * jsCodeLocation = [<span class=\"built_in\">NSURL</span> URLWithString:strUrl];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                         moduleName:<span class=\"string\">@\"NativeRNApp\"</span></span><br><span class=\"line\">                                                  initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                      launchOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view = rootView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">===&gt; moduleName:<span class=\"string\">@\"NativeRNApp\"</span> 注意这个名称要和index.ios.js 中的对应上</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-一些问题记录\"><a href=\"#3-一些问题记录\" class=\"headerlink\" title=\"3. 一些问题记录\"></a>3. 一些问题记录</h5><blockquote>\n<p><a href=\"http://blog.csdn.net/u014410695/article/details/50635842\" target=\"_blank\" rel=\"external\">参考</a></p>\n</blockquote>\n<p>报错: App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure 报错原因是需要开启内网http的访问权限（iOS9之后会有这个问题）。</p>\n<blockquote>\n<p>在Info.plist中添加 NSAppTransportSecurity 类型 Dictionary ;<br>在 NSAppTransportSecurity 下添加 NSAllowsArbitraryLoads 类型Boolean ,值设为 YES;<br>参考地址：</p>\n</blockquote>\n<p>-</p>\n<p>报错：RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance key in the Info.plist is set to NO 错误信息说的很清楚了。</p>\n<blockquote>\n<p>在Info.plist中添加View controller-based status bar appearance为NO。<br><a href=\"http://www.cnblogs.com/chglog/p/4746683.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/chglog/p/4746683.html</a></p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/11/rn-mixeddevelopment/3fb2e1d5b4f654d5.png\" alt=\"Markdown\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Markdown</div>\n            </figure>\n<p>应该还要在项目中设置node_modules的查找路径的…忘了在哪设置的了</p>\n<hr>\n<h3 id=\"集成已有RN模块-jsbundle-：\"><a href=\"#集成已有RN模块-jsbundle-：\" class=\"headerlink\" title=\"集成已有RN模块(jsbundle)：\"></a>集成已有RN模块(jsbundle)：</h3><blockquote>\n<p>RN的项目直接作为模块嵌入到已有项目中</p>\n</blockquote>\n<h4 id=\"一、开发配置-1\"><a href=\"#一、开发配置-1\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p>同上</p>\n</blockquote>\n<h4 id=\"二、开始开发-1\"><a href=\"#二、开始开发-1\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-RNApp-打包jsbundle及资源文件\"><a href=\"#2-1-RNApp-打包jsbundle及资源文件\" class=\"headerlink\" title=\"2-1 RNApp 打包jsbundle及资源文件\"></a>2-1 RNApp 打包jsbundle及资源文件</h5><blockquote>\n<p><a href=\"http://tutudev.com/2016/05/11/code-push-tutorial/\" target=\"_blank\" rel=\"external\">参考</a></p>\n</blockquote>\n<h6 id=\"打包：\"><a href=\"#打包：\" class=\"headerlink\" title=\"打包：\"></a>打包：</h6><ul>\n<li>(仅JS)</li>\n</ul>\n<blockquote>\n<p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./testCodePush/APP_task010001.js</p>\n</blockquote>\n<ul>\n<li>(包含图片等资源)</li>\n</ul>\n<blockquote>\n<p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./bundles/SwitchCheck010004.js –assets-dest ./bundles</p>\n</blockquote>\n<h5 id=\"2-2-嵌入原生项目\"><a href=\"#2-2-嵌入原生项目\" class=\"headerlink\" title=\"2-2 嵌入原生项目\"></a>2-2 嵌入原生项目</h5><ul>\n<li>把打包出来的jsbundle及assets复制到项目根目录</li>\n<li>更改入口文件</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>)initRNView &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *jsCodeLocation;</span><br><span class=\"line\">    jsCodeLocation = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"main\"</span> withExtension:<span class=\"string\">@\"jsbundle\"</span>];</span><br><span class=\"line\">    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                        moduleName:<span class=\"string\">@\"JucaiApp\"</span></span><br><span class=\"line\">                                                 initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                     launchOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect = [[<span class=\"built_in\">UIScreen</span> mainScreen] bounds];</span><br><span class=\"line\">    rootView.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, rect.size.width, rect.size.height);</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:rootView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">===&gt; 同样注意程序入口名称JucaiApp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果遇到确实某个RN项目package.json中配置的第三方依赖模块缺失，则需要在手动加到现有原生项目中(podfile维护即可)，但正常情况下是不需要滴.</p>\n</blockquote>\n<p>差一个目录的截图</p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><h4 id=\"原生混和开发：-1\"><a href=\"#原生混和开发：-1\" class=\"headerlink\" title=\"原生混和开发：\"></a>原生混和开发：</h4><h4 id=\"一、开发配置-2\"><a href=\"#一、开发配置-2\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><ul>\n<li>创建package.json 文件并npm install</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile &quot;com.facebook.react:react-native:+&quot;</span><br><span class=\"line\">\tcompile &apos;com.android.support:appcompat-v7:23.4.0&apos;</span><br><span class=\"line\">\tcompile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class=\"line\">\tcompile project(&apos;:@remobile/react-native-toast&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==&gt; 要用的库这样加进去,也可以Open Model Setting 添加依赖</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MainApplication 实现 ReactApplication并重载相关方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//facebook/react/ReactNativeHost.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getJSMainModuleName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index.android\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"meta\">@Nullable</span> <span class=\"function\">String <span class=\"title\">getBundleAssetName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index.android.bundle\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==&gt; <span class=\"number\">0.28</span>or0.29以后就默认情况下就会默认设定加载，具体可参考ReactNativeHost.java</span><br></pre></td></tr></table></figure>\n<ul>\n<li>build.gradle 添加设置node_modules的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenLocal()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span><br><span class=\"line\">            url &quot;$rootDir/../node_modules/react-native/android&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>暂未做在混合开发中配置RN DEBUG 方式，可以查看ReactNativeHost.java 配置即可</p>\n<h4 id=\"二、开始开发-2\"><a href=\"#二、开始开发-2\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-创建index-android-js\"><a href=\"#2-1-创建index-android-js\" class=\"headerlink\" title=\"2-1 创建index.android.js\"></a>2-1 创建index.android.js</h5><blockquote>\n<p>如果入口文件配置OK则就可看到RN开发页面了.</p>\n</blockquote>\n<blockquote>\n<p>同样，用RN开发的模块应该放在单独的目录中.</p>\n</blockquote>\n<hr>\n<h4 id=\"集成已有RN模块-jsbundle-：-1\"><a href=\"#集成已有RN模块-jsbundle-：-1\" class=\"headerlink\" title=\"集成已有RN模块(jsbundle)：\"></a>集成已有RN模块(jsbundle)：</h4><h4 id=\"一、开发配置-3\"><a href=\"#一、开发配置-3\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p>同样和IOS配置一样，这里需要android项目搭建好基本的RN开发环境</p>\n</blockquote>\n<h4 id=\"二、开始开发-3\"><a href=\"#二、开始开发-3\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-打包jsbundle及资源文件\"><a href=\"#2-1-打包jsbundle及资源文件\" class=\"headerlink\" title=\"2-1 打包jsbundle及资源文件\"></a>2-1 打包jsbundle及资源文件</h5><p>打包命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle.js --assets-dest ./bundles --dev false</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>同样，打包完毕后会有一些图片的资源文件夹，直接复制到res目录中</p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/11/rn-mixeddevelopment/aaa7347988b2c71a.png\" alt=\"Markdown\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Markdown</div>\n            </figure>\n<h5 id=\"2-2-配置加载的jsbundle\"><a href=\"#2-2-配置加载的jsbundle\" class=\"headerlink\" title=\"2-2 配置加载的jsbundle\"></a>2-2 配置加载的jsbundle</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected String getBundleAssetName()&#123;</span><br><span class=\"line\">    return &quot;main.jsbundle&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"到此，原生中集成RN开发流程就完成啦！\"><a href=\"#到此，原生中集成RN开发流程就完成啦！\" class=\"headerlink\" title=\"到此，原生中集成RN开发流程就完成啦！\"></a>到此，原生中集成RN开发流程就完成啦！</h3><blockquote>\n<p>参考项目后面会做</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"RN集成到原生项目\"><a href=\"#RN集成到原生项目\" class=\"headerlink\" title=\"RN集成到原生项目\"></a>RN集成到原生项目</h1><hr>\n<blockquote>\n<p>集成是双向的，RN很好的解决了这个问题。原生项目中使用RN开发还是很方便的。</p>\n</blockquote>\n<h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><h3 id=\"原生混和开发：\"><a href=\"#原生混和开发：\" class=\"headerlink\" title=\"原生混和开发：\"></a>原生混和开发：</h3><h4 id=\"一、开发配置\"><a href=\"#一、开发配置\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p><a href=\"http://www.jianshu.com/p/3dc9d70a790f\">参考</a></p>\n</blockquote>\n<h5 id=\"1-IOS项目中搭建RN开发环境-见参考\"><a href=\"#1-IOS项目中搭建RN开发环境-见参考\" class=\"headerlink\" title=\"1. IOS项目中搭建RN开发环境(见参考)\"></a>1. IOS项目中搭建RN开发环境(见参考)</h5><h5 id=\"2-创建package-json\"><a href=\"#2-创建package-json\" class=\"headerlink\" title=\"2. 创建package.json\"></a>2. 创建package.json</h5>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;MyRNApp&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;react&quot;: &quot;15.2.1&quot;,</span><br><span class=\"line\">    &quot;react-native&quot;: &quot;0.31.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">====&gt; npm install</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-安装CocoaPods\"><a href=\"#3-安装CocoaPods\" class=\"headerlink\" title=\"3. 安装CocoaPods\"></a>3. 安装CocoaPods</h5><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Uncomment this line to define a global platform for your project</span></span><br><span class=\"line\"><span class=\"meta\"># platform :ios, '9.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">target 'MyRNApp' do</span><br><span class=\"line\">  <span class=\"meta\"># Uncomment this line if you're using Swift or would like to use dynamic frameworks</span></span><br><span class=\"line\">  <span class=\"meta\"># use_frameworks!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\"># Pods for MyRNApp</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pod 'React', :path =&gt; 'node_modules/react-native', :subspecs =&gt; [</span><br><span class=\"line\">    'ART',</span><br><span class=\"line\">    'RCTActionSheet',</span><br><span class=\"line\">    'RCTAdSupport',</span><br><span class=\"line\">    'RCTGeolocation',</span><br><span class=\"line\">    'RCTImage',</span><br><span class=\"line\">    'RCTNetwork',</span><br><span class=\"line\">    'RCTPushNotification',</span><br><span class=\"line\">    'RCTSettings',</span><br><span class=\"line\">    'RCTText',</span><br><span class=\"line\">    'RCTVibration',</span><br><span class=\"line\">    'RCTWebSocket',</span><br><span class=\"line\">    'RCTLinkingIOS'</span><br><span class=\"line\">    <span class=\"meta\"># Add any other subspecs you want to use in your project</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\">  target 'MyRNAppTests' do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    <span class=\"meta\"># Pods for testing</span></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  target 'MyRNAppUITests' do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    <span class=\"meta\"># Pods for testing</span></span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">注意path的路径设置,默认根目录,也可文件夹中</span><br><span class=\"line\">====&gt; pod install 喽~</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、开始开发\"><a href=\"#二、开始开发\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"1-创建index-ios-js\"><a href=\"#1-创建index-ios-js\" class=\"headerlink\" title=\"1. 创建index.ios.js\"></a>1. 创建index.ios.js</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">\t</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">    Text,</span><br><span class=\"line\">    View,</span><br><span class=\"line\">    AppRegistry</span><br><span class=\"line\">&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">class NativeRNApp extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View &gt;</span><br><span class=\"line\">        &lt;Text&gt;This is a simple application.&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AppRegistry.registerComponent(&apos;NativeRNApp&apos;, () =&gt; NativeRNApp);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-设置JS入口\"><a href=\"#2-设置JS入口\" class=\"headerlink\" title=\"2. 设置JS入口\"></a>2. 设置JS入口</h5><blockquote>\n<p>注: 可以直接就设置到默认的ViewController,也可以自己写个ReactViewController</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></span><br><span class=\"line\">\t</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span> initRNView];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)didReceiveMemoryWarning &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> didReceiveMemoryWarning];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)initRNView &#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSString</span> * strUrl = <span class=\"string\">@\"http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> * jsCodeLocation = [<span class=\"built_in\">NSURL</span> URLWithString:strUrl];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    RCTRootView * rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                         moduleName:<span class=\"string\">@\"NativeRNApp\"</span></span><br><span class=\"line\">                                                  initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                      launchOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.view = rootView;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">===&gt; moduleName:<span class=\"string\">@\"NativeRNApp\"</span> 注意这个名称要和index.ios.js 中的对应上</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-一些问题记录\"><a href=\"#3-一些问题记录\" class=\"headerlink\" title=\"3. 一些问题记录\"></a>3. 一些问题记录</h5><blockquote>\n<p><a href=\"http://blog.csdn.net/u014410695/article/details/50635842\">参考</a></p>\n</blockquote>\n<p>报错: App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure 报错原因是需要开启内网http的访问权限（iOS9之后会有这个问题）。</p>\n<blockquote>\n<p>在Info.plist中添加 NSAppTransportSecurity 类型 Dictionary ;<br>在 NSAppTransportSecurity 下添加 NSAllowsArbitraryLoads 类型Boolean ,值设为 YES;<br>参考地址：</p>\n</blockquote>\n<p>-</p>\n<p>报错：RCTStatusBarManager module requires that the UIViewControllerBasedStatusBarAppearance key in the Info.plist is set to NO 错误信息说的很清楚了。</p>\n<blockquote>\n<p>在Info.plist中添加View controller-based status bar appearance为NO。<br><a href=\"http://www.cnblogs.com/chglog/p/4746683.html\">http://www.cnblogs.com/chglog/p/4746683.html</a></p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/11/rn-mixeddevelopment/3fb2e1d5b4f654d5.png\" alt=\"Markdown\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Markdown</div>\n            </figure>\n<p>应该还要在项目中设置node_modules的查找路径的…忘了在哪设置的了</p>\n<hr>\n<h3 id=\"集成已有RN模块-jsbundle-：\"><a href=\"#集成已有RN模块-jsbundle-：\" class=\"headerlink\" title=\"集成已有RN模块(jsbundle)：\"></a>集成已有RN模块(jsbundle)：</h3><blockquote>\n<p>RN的项目直接作为模块嵌入到已有项目中</p>\n</blockquote>\n<h4 id=\"一、开发配置-1\"><a href=\"#一、开发配置-1\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p>同上</p>\n</blockquote>\n<h4 id=\"二、开始开发-1\"><a href=\"#二、开始开发-1\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-RNApp-打包jsbundle及资源文件\"><a href=\"#2-1-RNApp-打包jsbundle及资源文件\" class=\"headerlink\" title=\"2-1 RNApp 打包jsbundle及资源文件\"></a>2-1 RNApp 打包jsbundle及资源文件</h5><blockquote>\n<p><a href=\"http://tutudev.com/2016/05/11/code-push-tutorial/\">参考</a></p>\n</blockquote>\n<h6 id=\"打包：\"><a href=\"#打包：\" class=\"headerlink\" title=\"打包：\"></a>打包：</h6><ul>\n<li>(仅JS)</li>\n</ul>\n<blockquote>\n<p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./testCodePush/APP_task010001.js</p>\n</blockquote>\n<ul>\n<li>(包含图片等资源)</li>\n</ul>\n<blockquote>\n<p>react-native bundle –parameter ios –entry-file index.ios.js –bundle-output ./bundles/SwitchCheck010004.js –assets-dest ./bundles</p>\n</blockquote>\n<h5 id=\"2-2-嵌入原生项目\"><a href=\"#2-2-嵌入原生项目\" class=\"headerlink\" title=\"2-2 嵌入原生项目\"></a>2-2 嵌入原生项目</h5><ul>\n<li>把打包出来的jsbundle及assets复制到项目根目录</li>\n<li>更改入口文件</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>)initRNView &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSURL</span> *jsCodeLocation;</span><br><span class=\"line\">    jsCodeLocation = [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@\"main\"</span> withExtension:<span class=\"string\">@\"jsbundle\"</span>];</span><br><span class=\"line\">    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                        moduleName:<span class=\"string\">@\"JucaiApp\"</span></span><br><span class=\"line\">                                                 initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                     launchOptions:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect = [[<span class=\"built_in\">UIScreen</span> mainScreen] bounds];</span><br><span class=\"line\">    rootView.frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, rect.size.width, rect.size.height);</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:rootView];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">===&gt; 同样注意程序入口名称JucaiApp</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：如果遇到确实某个RN项目package.json中配置的第三方依赖模块缺失，则需要在手动加到现有原生项目中(podfile维护即可)，但正常情况下是不需要滴.</p>\n</blockquote>\n<p>差一个目录的截图</p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><h4 id=\"原生混和开发：-1\"><a href=\"#原生混和开发：-1\" class=\"headerlink\" title=\"原生混和开发：\"></a>原生混和开发：</h4><h4 id=\"一、开发配置-2\"><a href=\"#一、开发配置-2\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><ul>\n<li>创建package.json 文件并npm install</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">\tcompile &quot;com.facebook.react:react-native:+&quot;</span><br><span class=\"line\">\tcompile &apos;com.android.support:appcompat-v7:23.4.0&apos;</span><br><span class=\"line\">\tcompile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])</span><br><span class=\"line\">\tcompile project(&apos;:@remobile/react-native-toast&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==&gt; 要用的库这样加进去,也可以Open Model Setting 添加依赖</span><br></pre></td></tr></table></figure>\n<ul>\n<li>MainApplication 实现 ReactApplication并重载相关方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//facebook/react/ReactNativeHost.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getJSMainModuleName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index.android\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"meta\">@Nullable</span> <span class=\"function\">String <span class=\"title\">getBundleAssetName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"index.android.bundle\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">==&gt; <span class=\"number\">0.28</span>or0.29以后就默认情况下就会默认设定加载，具体可参考ReactNativeHost.java</span><br></pre></td></tr></table></figure>\n<ul>\n<li>build.gradle 添加设置node_modules的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenLocal()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm</span><br><span class=\"line\">            url &quot;$rootDir/../node_modules/react-native/android&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>暂未做在混合开发中配置RN DEBUG 方式，可以查看ReactNativeHost.java 配置即可</p>\n<h4 id=\"二、开始开发-2\"><a href=\"#二、开始开发-2\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-创建index-android-js\"><a href=\"#2-1-创建index-android-js\" class=\"headerlink\" title=\"2-1 创建index.android.js\"></a>2-1 创建index.android.js</h5><blockquote>\n<p>如果入口文件配置OK则就可看到RN开发页面了.</p>\n</blockquote>\n<blockquote>\n<p>同样，用RN开发的模块应该放在单独的目录中.</p>\n</blockquote>\n<hr>\n<h4 id=\"集成已有RN模块-jsbundle-：-1\"><a href=\"#集成已有RN模块-jsbundle-：-1\" class=\"headerlink\" title=\"集成已有RN模块(jsbundle)：\"></a>集成已有RN模块(jsbundle)：</h4><h4 id=\"一、开发配置-3\"><a href=\"#一、开发配置-3\" class=\"headerlink\" title=\"一、开发配置\"></a>一、开发配置</h4><blockquote>\n<p>同样和IOS配置一样，这里需要android项目搭建好基本的RN开发环境</p>\n</blockquote>\n<h4 id=\"二、开始开发-3\"><a href=\"#二、开始开发-3\" class=\"headerlink\" title=\"二、开始开发\"></a>二、开始开发</h4><h5 id=\"2-1-打包jsbundle及资源文件\"><a href=\"#2-1-打包jsbundle及资源文件\" class=\"headerlink\" title=\"2-1 打包jsbundle及资源文件\"></a>2-1 打包jsbundle及资源文件</h5><p>打包命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native bundle android --entry-file index.android.js --bundle-output ./bundles/index.android.bundle.js --assets-dest ./bundles --dev false</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>同样，打包完毕后会有一些图片的资源文件夹，直接复制到res目录中</p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/2017/03/11/rn-mixeddevelopment/aaa7347988b2c71a.png\" alt=\"Markdown\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Markdown</div>\n            </figure>\n<h5 id=\"2-2-配置加载的jsbundle\"><a href=\"#2-2-配置加载的jsbundle\" class=\"headerlink\" title=\"2-2 配置加载的jsbundle\"></a>2-2 配置加载的jsbundle</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected String getBundleAssetName()&#123;</span><br><span class=\"line\">    return &quot;main.jsbundle&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"到此，原生中集成RN开发流程就完成啦！\"><a href=\"#到此，原生中集成RN开发流程就完成啦！\" class=\"headerlink\" title=\"到此，原生中集成RN开发流程就完成啦！\"></a>到此，原生中集成RN开发流程就完成啦！</h3><blockquote>\n<p>参考项目后面会做</p>\n</blockquote>"},{"title":"RN-Promotion","date":"2017-03-12T15:09:28.000Z","_content":"\n# RN-记录的组件\n***\n\n> 项目中一些组件的实现及相关实践\n\n<!--more-->\n## 日历\n\n## 自定义Scrollview下拉动画\n\n## 滚动广告区域\n\n## 滚动数字\n\n## 收益曲线图及动画\n\n## 手势解锁\n\n## \n\n\n\n\n","source":"_posts/rn-promotion.md","raw":"---\ntitle: RN-Promotion\ncategories: 前端开发\ntags: react-native\ndate: 2017-03-12 23:09:28\n---\n\n# RN-记录的组件\n***\n\n> 项目中一些组件的实现及相关实践\n\n<!--more-->\n## 日历\n\n## 自定义Scrollview下拉动画\n\n## 滚动广告区域\n\n## 滚动数字\n\n## 收益曲线图及动画\n\n## 手势解锁\n\n## \n\n\n\n\n","slug":"rn-promotion","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6ofc000wffjy0wjyzmx3","content":"<h1 id=\"RN-记录的组件\"><a href=\"#RN-记录的组件\" class=\"headerlink\" title=\"RN-记录的组件\"></a>RN-记录的组件</h1><hr>\n<blockquote>\n<p>项目中一些组件的实现及相关实践</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h2><h2 id=\"自定义Scrollview下拉动画\"><a href=\"#自定义Scrollview下拉动画\" class=\"headerlink\" title=\"自定义Scrollview下拉动画\"></a>自定义Scrollview下拉动画</h2><h2 id=\"滚动广告区域\"><a href=\"#滚动广告区域\" class=\"headerlink\" title=\"滚动广告区域\"></a>滚动广告区域</h2><h2 id=\"滚动数字\"><a href=\"#滚动数字\" class=\"headerlink\" title=\"滚动数字\"></a>滚动数字</h2><h2 id=\"收益曲线图及动画\"><a href=\"#收益曲线图及动画\" class=\"headerlink\" title=\"收益曲线图及动画\"></a>收益曲线图及动画</h2><h2 id=\"手势解锁\"><a href=\"#手势解锁\" class=\"headerlink\" title=\"手势解锁\"></a>手势解锁</h2><p>## </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"RN-记录的组件\"><a href=\"#RN-记录的组件\" class=\"headerlink\" title=\"RN-记录的组件\"></a>RN-记录的组件</h1><hr>\n<blockquote>\n<p>项目中一些组件的实现及相关实践</p>\n</blockquote>","more":"<h2 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h2><h2 id=\"自定义Scrollview下拉动画\"><a href=\"#自定义Scrollview下拉动画\" class=\"headerlink\" title=\"自定义Scrollview下拉动画\"></a>自定义Scrollview下拉动画</h2><h2 id=\"滚动广告区域\"><a href=\"#滚动广告区域\" class=\"headerlink\" title=\"滚动广告区域\"></a>滚动广告区域</h2><h2 id=\"滚动数字\"><a href=\"#滚动数字\" class=\"headerlink\" title=\"滚动数字\"></a>滚动数字</h2><h2 id=\"收益曲线图及动画\"><a href=\"#收益曲线图及动画\" class=\"headerlink\" title=\"收益曲线图及动画\"></a>收益曲线图及动画</h2><h2 id=\"手势解锁\"><a href=\"#手势解锁\" class=\"headerlink\" title=\"手势解锁\"></a>手势解锁</h2><p>## </p>"},{"title":"RN-原生组件封装-IOS","date":"2017-03-20T13:47:37.000Z","_content":"\n# 原生模块封装-IOS\n### [Demo](https://github.com/naivehhr/aran_native_log)\n\n### ps: 还是得自己过坑😁\n\n- 1、创建一个用来调试模块的RN项目\n\n- 2、在项目的node_module目录下创存放组件的目录比如A\n\n- 3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试\n\n- 4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)\n\n<!--more-->\n\n- 5、把RN->IOS项目中封装模块的代码.h.m拷贝到静态库文件中\n\n- 6、设置静态库项目的header search path路径(添加React的依赖)\n\n```\nBuild Settings->Header Search Patchs->$(SRCROOT)/../../react-native/React -> recursive\n\n```\n\n### 注意：\n- 1 如果是别人的库，按照要求添加应该就OK\n- 2 自己开发的库如果出现找不到React相关依赖时，查看引用路径，或组件导出输出路径是否正确(90%是这的问题)\n- 3 可直接在依赖静态库中更改Search Paths\n\n\n![Alt text](RN-原生组件封装-IOS/setting_header_search_paths.png)\n\n### TODO\n\n> 更多原生事件等\n","source":"_posts/rn-原生组件封装-ios.md","raw":"---\ntitle: RN-原生组件封装-IOS\ndate: 2017-03-20 21:47:37\ncategories: 前端开发\ntags: react-native\n---\n\n# 原生模块封装-IOS\n### [Demo](https://github.com/naivehhr/aran_native_log)\n\n### ps: 还是得自己过坑😁\n\n- 1、创建一个用来调试模块的RN项目\n\n- 2、在项目的node_module目录下创存放组件的目录比如A\n\n- 3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试\n\n- 4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)\n\n<!--more-->\n\n- 5、把RN->IOS项目中封装模块的代码.h.m拷贝到静态库文件中\n\n- 6、设置静态库项目的header search path路径(添加React的依赖)\n\n```\nBuild Settings->Header Search Patchs->$(SRCROOT)/../../react-native/React -> recursive\n\n```\n\n### 注意：\n- 1 如果是别人的库，按照要求添加应该就OK\n- 2 自己开发的库如果出现找不到React相关依赖时，查看引用路径，或组件导出输出路径是否正确(90%是这的问题)\n- 3 可直接在依赖静态库中更改Search Paths\n\n\n![Alt text](RN-原生组件封装-IOS/setting_header_search_paths.png)\n\n### TODO\n\n> 更多原生事件等\n","slug":"rn-原生组件封装-ios","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6ofe000zffjy73uxqdwv","content":"<h1 id=\"原生模块封装-IOS\"><a href=\"#原生模块封装-IOS\" class=\"headerlink\" title=\"原生模块封装-IOS\"></a>原生模块封装-IOS</h1><h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://github.com/naivehhr/aran_native_log\" target=\"_blank\" rel=\"external\">Demo</a></h3><h3 id=\"ps-还是得自己过坑😁\"><a href=\"#ps-还是得自己过坑😁\" class=\"headerlink\" title=\"ps: 还是得自己过坑😁\"></a>ps: 还是得自己过坑😁</h3><ul>\n<li><p>1、创建一个用来调试模块的RN项目</p>\n</li>\n<li><p>2、在项目的node_module目录下创存放组件的目录比如A</p>\n</li>\n<li><p>3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试</p>\n</li>\n<li><p>4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>5、把RN-&gt;IOS项目中封装模块的代码.h.m拷贝到静态库文件中</p>\n</li>\n<li><p>6、设置静态库项目的header search path路径(添加React的依赖)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Build Settings-&gt;Header Search Patchs-&gt;$(SRCROOT)/../../react-native/React -&gt; recursive</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ul>\n<li>1 如果是别人的库，按照要求添加应该就OK</li>\n<li>2 自己开发的库如果出现找不到React相关依赖时，查看引用路径，或组件导出输出路径是否正确(90%是这的问题)</li>\n<li>3 可直接在依赖静态库中更改Search Paths</li>\n</ul>\n<p><img src=\"/2017/03/20/rn-原生组件封装-ios/RN-原生组件封装-IOS/setting_header_search_paths.png\" alt=\"Alt text\"></p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><blockquote>\n<p>更多原生事件等</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"原生模块封装-IOS\"><a href=\"#原生模块封装-IOS\" class=\"headerlink\" title=\"原生模块封装-IOS\"></a>原生模块封装-IOS</h1><h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a><a href=\"https://github.com/naivehhr/aran_native_log\">Demo</a></h3><h3 id=\"ps-还是得自己过坑😁\"><a href=\"#ps-还是得自己过坑😁\" class=\"headerlink\" title=\"ps: 还是得自己过坑😁\"></a>ps: 还是得自己过坑😁</h3><ul>\n<li><p>1、创建一个用来调试模块的RN项目</p>\n</li>\n<li><p>2、在项目的node_module目录下创存放组件的目录比如A</p>\n</li>\n<li><p>3、XCODE打开RN项目中的IOS项目, 完成原生模块的封装及测试</p>\n</li>\n<li><p>4、封装完成后, 使用XCODE在目录A中创建静态库项目(模块名称最好和上面调试模块的名称一致)</p>\n</li>\n</ul>","more":"<ul>\n<li><p>5、把RN-&gt;IOS项目中封装模块的代码.h.m拷贝到静态库文件中</p>\n</li>\n<li><p>6、设置静态库项目的header search path路径(添加React的依赖)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Build Settings-&gt;Header Search Patchs-&gt;$(SRCROOT)/../../react-native/React -&gt; recursive</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><ul>\n<li>1 如果是别人的库，按照要求添加应该就OK</li>\n<li>2 自己开发的库如果出现找不到React相关依赖时，查看引用路径，或组件导出输出路径是否正确(90%是这的问题)</li>\n<li>3 可直接在依赖静态库中更改Search Paths</li>\n</ul>\n<p><img src=\"/2017/03/20/rn-原生组件封装-ios/RN-原生组件封装-IOS/setting_header_search_paths.png\" alt=\"Alt text\"></p>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><blockquote>\n<p>更多原生事件等</p>\n</blockquote>"},{"title":"rn-键盘遮挡问题","date":"2017-03-28T14:35:37.000Z","_content":"\n# rn-键盘遮挡问题\n***\n1、KeyboardAvoidingView\n2、DeviceEventEmitter(隐藏API系列)\n<!--more-->\n```javascript\n constructor (props){\n    super(props);\n    DeviceEventEmitter.addListener('keyboardWillShow', this.keyboardWillShow.bind(this));\n    DeviceEventEmitter.addListener('keyboardWillHide', this.keyboardWillHide.bind(this));\n  }\n\n  keyboardWillShow (e){\n    this.commentView && this.commentView.setNativeProps({\n            style: {\n                height: commentHeight - e.endCoordinates.height\n            }\n        })\n  }\n\n  keyboardWillHide (){\n    this.commentView && this.commentView.setNativeProps({\n            style: {\n                height: commentHeight\n            }\n        })\n  }  \n\n componentUnMount(){\n    this.keyboardWillHideEvent.remove()\n    this.keyboardWillShowEvent.remove()\n  }\n\n```\n\n>  \n> 描述\n\n","source":"_posts/rn-键盘遮挡问题.md","raw":"---\ntitle: rn-键盘遮挡问题\ndate: 2017-03-28 22:35:37\ntags:\n---\n\n# rn-键盘遮挡问题\n***\n1、KeyboardAvoidingView\n2、DeviceEventEmitter(隐藏API系列)\n<!--more-->\n```javascript\n constructor (props){\n    super(props);\n    DeviceEventEmitter.addListener('keyboardWillShow', this.keyboardWillShow.bind(this));\n    DeviceEventEmitter.addListener('keyboardWillHide', this.keyboardWillHide.bind(this));\n  }\n\n  keyboardWillShow (e){\n    this.commentView && this.commentView.setNativeProps({\n            style: {\n                height: commentHeight - e.endCoordinates.height\n            }\n        })\n  }\n\n  keyboardWillHide (){\n    this.commentView && this.commentView.setNativeProps({\n            style: {\n                height: commentHeight\n            }\n        })\n  }  \n\n componentUnMount(){\n    this.keyboardWillHideEvent.remove()\n    this.keyboardWillShowEvent.remove()\n  }\n\n```\n\n>  \n> 描述\n\n","slug":"rn-键盘遮挡问题","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6ofj0013ffjy6ivm8l9y","content":"<h1 id=\"rn-键盘遮挡问题\"><a href=\"#rn-键盘遮挡问题\" class=\"headerlink\" title=\"rn-键盘遮挡问题\"></a>rn-键盘遮挡问题</h1><hr>\n<p>1、KeyboardAvoidingView<br>2、DeviceEventEmitter(隐藏API系列)<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (props)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">   DeviceEventEmitter.addListener(<span class=\"string\">'keyboardWillShow'</span>, <span class=\"keyword\">this</span>.keyboardWillShow.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">   DeviceEventEmitter.addListener(<span class=\"string\">'keyboardWillHide'</span>, <span class=\"keyword\">this</span>.keyboardWillHide.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> keyboardWillShow (e)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.commentView &amp;&amp; <span class=\"keyword\">this</span>.commentView.setNativeProps(&#123;</span><br><span class=\"line\">           style: &#123;</span><br><span class=\"line\">               height: commentHeight - e.endCoordinates.height</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> keyboardWillHide ()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.commentView &amp;&amp; <span class=\"keyword\">this</span>.commentView.setNativeProps(&#123;</span><br><span class=\"line\">           style: &#123;</span><br><span class=\"line\">               height: commentHeight</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">componentUnMount()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.keyboardWillHideEvent.remove()</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.keyboardWillShowEvent.remove()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>描述</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"rn-键盘遮挡问题\"><a href=\"#rn-键盘遮挡问题\" class=\"headerlink\" title=\"rn-键盘遮挡问题\"></a>rn-键盘遮挡问题</h1><hr>\n<p>1、KeyboardAvoidingView<br>2、DeviceEventEmitter(隐藏API系列)<br></p>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> (props)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">   DeviceEventEmitter.addListener(<span class=\"string\">'keyboardWillShow'</span>, <span class=\"keyword\">this</span>.keyboardWillShow.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">   DeviceEventEmitter.addListener(<span class=\"string\">'keyboardWillHide'</span>, <span class=\"keyword\">this</span>.keyboardWillHide.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> keyboardWillShow (e)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.commentView &amp;&amp; <span class=\"keyword\">this</span>.commentView.setNativeProps(&#123;</span><br><span class=\"line\">           style: &#123;</span><br><span class=\"line\">               height: commentHeight - e.endCoordinates.height</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> keyboardWillHide ()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.commentView &amp;&amp; <span class=\"keyword\">this</span>.commentView.setNativeProps(&#123;</span><br><span class=\"line\">           style: &#123;</span><br><span class=\"line\">               height: commentHeight</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">componentUnMount()&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.keyboardWillHideEvent.remove()</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.keyboardWillShowEvent.remove()</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p></p>\n<blockquote>\n<p>描述</p>\n</blockquote>"},{"title":"rn-f8app","date":"2017-03-11T14:58:10.000Z","_content":"\n# Title\n***\n>  \n> 描述\n\n<!--more-->","source":"_posts/rn-f8app.md","raw":"---\ntitle: rn-f8app\ndate: 2017-03-11 22:58:10\ntags:\n---\n\n# Title\n***\n>  \n> 描述\n\n<!--more-->","slug":"rn-f8app","published":1,"updated":"2018-07-04T17:15:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjbh6ofm0016ffjyxg7e4p58","content":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"Title\"><a href=\"#Title\" class=\"headerlink\" title=\"Title\"></a>Title</h1><hr>\n<blockquote>\n<p>描述</p>\n</blockquote>","more":""}],"PostAsset":[{"_id":"source/_posts/rn-原生组件封装-android/catalogue.png","post":"cjjbh6of2000nffjy896ay8y0","slug":"catalogue.png","modified":1,"renderable":1},{"_id":"source/_posts/rn-原生组件封装-ios/setting_header_search_paths.png","post":"cjjbh6ofe000zffjy73uxqdwv","slug":"setting_header_search_paths.png","modified":1,"renderable":1},{"_id":"source/_posts/rn-mixeddevelopment/3fb2e1d5b4f654d5.png","post":"cjjbh6of9000tffjy5jfpsshj","slug":"3fb2e1d5b4f654d5.png","modified":1,"renderable":1},{"_id":"source/_posts/rn-mixeddevelopment/aaa7347988b2c71a.png","post":"cjjbh6of9000tffjy5jfpsshj","slug":"aaa7347988b2c71a.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjjbh6oek0006ffjynq5udson","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6oez000kffjykk1vfs3z"},{"post_id":"cjjbh6oew000jffjypiqodi0e","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6of5000pffjy7bq9jrjy"},{"post_id":"cjjbh6oen0007ffjyol53mdgw","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6of7000sffjyerl5de6b"},{"post_id":"cjjbh6of0000mffjyw28k3tmg","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6ofb000vffjylghp0fnr"},{"post_id":"cjjbh6of2000nffjy896ay8y0","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6ofd000yffjy6zvlf26d"},{"post_id":"cjjbh6of9000tffjy5jfpsshj","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6ofi0012ffjyo9fuqihn"},{"post_id":"cjjbh6ofc000wffjy0wjyzmx3","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6ofm0015ffjykbi1igb7"},{"post_id":"cjjbh6ofe000zffjy73uxqdwv","category_id":"cjjbh6oeq0009ffjynblg3k55","_id":"cjjbh6ofo0019ffjyvzpz6ztk"}],"PostTag":[{"post_id":"cjjbh6oek0006ffjynq5udson","tag_id":"cjjbh6oea0004ffjy7w9wfpcz","_id":"cjjbh6oer000affjyxzxbclqn"},{"post_id":"cjjbh6odw0000ffjyf0e0tnkp","tag_id":"cjjbh6oea0004ffjy7w9wfpcz","_id":"cjjbh6oes000cffjymkkqpuh5"},{"post_id":"cjjbh6oen0007ffjyol53mdgw","tag_id":"cjjbh6oea0004ffjy7w9wfpcz","_id":"cjjbh6oeu000effjyqsuv3xrt"},{"post_id":"cjjbh6oer000bffjy7smvx206","tag_id":"cjjbh6oea0004ffjy7w9wfpcz","_id":"cjjbh6oew000iffjy02xh677c"},{"post_id":"cjjbh6oef0005ffjy7ih4h8po","tag_id":"cjjbh6oea0004ffjy7w9wfpcz","_id":"cjjbh6of0000lffjygnr3s4sm"},{"post_id":"cjjbh6oes000dffjy8j9cjind","tag_id":"cjjbh6oew000hffjykokqev9a","_id":"cjjbh6of5000qffjy81leh41b"},{"post_id":"cjjbh6oeu000fffjys288j858","tag_id":"cjjbh6of4000offjykyzzo72b","_id":"cjjbh6ofd000xffjy1vgzja75"},{"post_id":"cjjbh6ofc000wffjy0wjyzmx3","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofi0011ffjyfxd7xcb3"},{"post_id":"cjjbh6oew000jffjypiqodi0e","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofl0014ffjyp309ka98"},{"post_id":"cjjbh6ofe000zffjy73uxqdwv","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofo0018ffjytltxf6m2"},{"post_id":"cjjbh6of0000mffjyw28k3tmg","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofo001affjygp83knys"},{"post_id":"cjjbh6of2000nffjy896ay8y0","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofp001cffjys0uqhg14"},{"post_id":"cjjbh6of9000tffjy5jfpsshj","tag_id":"cjjbh6ofb000uffjylcpeoncz","_id":"cjjbh6ofp001dffjy0o8v7n82"}],"Tag":[{"name":"javascript","_id":"cjjbh6oea0004ffjy7w9wfpcz"},{"name":"node.js","_id":"cjjbh6oew000hffjykokqev9a"},{"name":"react","_id":"cjjbh6of4000offjykyzzo72b"},{"name":"react-native","_id":"cjjbh6ofb000uffjylcpeoncz"}]}}